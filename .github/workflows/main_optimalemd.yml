name: Build and deploy Node.js app to Azure Web App - optimaleMD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# allow workflow to request id-token for azure/login and read repo contents
permissions:
  contents: read
  id-token: write

env:
  NODE_ENV: production

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node 20
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          set -e
          npm ci

      - name: Generate Prisma client (CI)
        run: |
          set -e
          echo "=> Running prisma generate in CI"
          npx prisma generate

      - name: Build app
        run: |
          set -e
          echo "=> Building app"
          npm run build
          npm run test --if-present || true

      - name: Verify build & generated Prisma client
        run: |
          set -e
          echo "=> Verifying build output"
          if [ ! -f dist/main.js ] && [ ! -f dist/index.js ]; then
            echo "ERROR: Build output not found (expected dist/main.js or dist/index.js)."
            ls -la dist || true
            exit 1
          fi

          echo "=> Verifying prisma client exists in node_modules"
          if [ ! -d node_modules/.prisma ] || [ ! -d node_modules/@prisma/client ]; then
            echo "ERROR: Prisma client not found in node_modules"
            ls -la node_modules | head -n 200 || true
            exit 1
          fi

      - name: Package node_modules (so prisma client is deployed)
        run: |
          set -e
          echo "=> Creating node_modules.tar.gz"
          tar -czf node_modules.tar.gz node_modules

      - name: Prepare deploy package (ZIP)
        run: |
          set -e
          echo "=> Preparing deploy package"
          rm -rf deploy_package || true
          mkdir -p deploy_package
          cp package.json package-lock.json deploy_package/ || true
          cp -r dist deploy_package/ || true
          cp node_modules.tar.gz deploy_package/ || true
          # include static runtime assets if you need them
          cp -n public/* deploy_package/ 2>/dev/null || true
          (cd deploy_package && zip -r ../package.zip .)
          echo "=> package.zip contents:"
          unzip -l package.zip || true

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: package.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: node-app
          path: node-app

      - name: Show downloaded artifact (debug)
        run: |
          echo "PWD: $(pwd)"
          echo "Files:"
          ls -la
          echo "node-app contents:"
          ls -la node-app || true
          echo "package.zip listing:"
          unzip -l node-app/package.zip || true

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_129A1D0672A546CAAB3B61D73745770C }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_AA2855DFF4484260AB39F7440ABB5F06 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_57A70D711A884D1BBFC55640AD876E9E }}

      - name: Deploy to Azure Web App (ZIP deploy)
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'optimaleMD'
          slot-name: 'Production'
          package: './node-app/package.zip'
