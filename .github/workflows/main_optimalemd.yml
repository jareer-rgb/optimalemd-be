name: Build and deploy Node.js app to Azure Web App - optimaleMD

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Install, generate prisma client, build and test
        run: |
          set -e
          echo "=== npm ci ==="
          npm ci

          echo "=== prisma generate (creates node_modules/.prisma & @prisma/client) ==="
          npx prisma generate

          echo "=== build ==="
          npm run build
          npm run test --if-present || true

          echo "=== verify generated prisma client exists ==="
          if [ ! -d node_modules/.prisma ] || [ ! -d node_modules/@prisma/client ]; then
            echo "ERROR: generated prisma client not found in node_modules"
            echo "Contents of node_modules (first-level):"
            ls -la node_modules || true
            exit 1
          fi

          echo "=== create node_modules tar (App Service extracts this at startup) ==="
          tar -czf node_modules.tar.gz node_modules

          echo "=== prepare deploy package ==="
          rm -rf deploy_package || true
          mkdir -p deploy_package
          cp package.json package-lock.json deploy_package/ || true
          cp -r dist deploy_package/ || true
          cp node_modules.tar.gz deploy_package/ || true
          # include any runtime-only files you need (e.g. static assets)
          cp -n .env* deploy_package/ || true

          echo "=== create package.zip ==="
          (cd deploy_package && zip -r ../package.zip .)

      - name: Upload deployment package artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: package.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app
          path: node-app

      - name: Show downloaded files (debug)
        run: |
          echo "PWD: $(pwd)"
          ls -la
          ls -la node-app || true
          ls -la node-app/package.zip || true

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_129A1D0672A546CAAB3B61D73745770C }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_AA2855DFF4484260AB39F7440ABB5F06 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_57A70D711A884D1BBFC55640AD876E9E }}

      - name: Deploy to Azure Web App (ZIP deploy)
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'optimaleMD'
          slot-name: 'Production'
          package: './node-app/package.zip'

      - name: Deployment verification (tail logs)
        if: always()
        run: |
          echo "=== deployment finished; check app logs in Azure portal or use Kudu (SCM) console ==="
          echo "You can also run Kudu DebugConsole at https://<your-app-name>.scm.azurewebsites.net/DebugConsole"
